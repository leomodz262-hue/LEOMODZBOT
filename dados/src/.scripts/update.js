#!/usr/bin/env node

const fs = require('fs/promises');
const fsSync = require('fs');
const path = require('path');
const { execSync, exec } = require('child_process');
const readline = require('readline');
const os = require('os');
const { promisify } = require('util');
const execAsync = promisify(exec);

const REPO_URL = 'https://github.com/hiudyy/nazuna.git';
const BACKUP_DIR = path.join(process.cwd(), `backup_${new Date().toISOString().replace(/[:.]/g, '_').replace(/T/, '_')}`);
const TEMP_DIR = path.join(process.cwd(), 'temp_nazuna');
const isWindows = os.platform() === 'win32';

const colors = {
  reset: '\x1b[0m',
  green: '\x1b[1;32m',
  red: '\x1b[1;31m',
  blue: '\x1b[1;34m',
  yellow: '\x1b[1;33m',
  cyan: '\x1b[1;36m',
  magenta: '\x1b[1;35m',
  dim: '\x1b[2m',
  bold: '\x1b[1m',
};

function printMessage(text) {
  console.log(`${colors.green}${text}${colors.reset}`);
}

function printWarning(text) {
  console.log(`${colors.red}${text}${colors.reset}`);
}

function printInfo(text) {
  console.log(`${colors.cyan}${text}${colors.reset}`);
}

function printDetail(text) {
  console.log(`${colors.dim}${text}${colors.reset}`);
}

function printSeparator() {
  console.log(`${colors.blue}============================================${colors.reset}`);
}

function setupGracefulShutdown() {
  const shutdown = () => {
    console.log('\n');
    printWarning('üõë Atualiza√ß√£o cancelada pelo usu√°rio.');
    process.exit(0);
  };

  process.on('SIGINT', shutdown);
  process.on('SIGTERM', shutdown);
}

async function displayHeader() {
  const header = [
    `${colors.bold}üöÄ LEO MODZ BOT - Atualizador${colors.reset}`,
    `${colors.bold}üë®‚Äçüíª Criado por Hiudy${colors.reset}`,
  ];

  printSeparator();
  for (const line of header) {
    process.stdout.write(line + '\n');
  }
  printSeparator();
  console.log();
}

async function checkRequirements() {
  printInfo('üîç Verificando requisitos do sistema...');

  try {
    await execAsync('git --version');
    printDetail('‚úÖ Git encontrado.');
  } catch (error) {
    printWarning('‚ö†Ô∏è Git n√£o encontrado! √â necess√°rio para atualizar o LEO MODZ BOT.');
    if (isWindows) {
      printInfo('üì• Instale o Git em: https://git-scm.com/download/win');
    } else if (os.platform() === 'darwin') {
      printInfo('üì• Instale o Git com: brew install git');
    } else {
      printInfo('üì• Instale o Git com: sudo apt-get install git (Ubuntu/Debian) ou equivalente.');
    }
    process.exit(1);
  }

  try {
    await execAsync('npm --version');
    printDetail('‚úÖ NPM encontrado.');
  } catch (error) {
    printWarning('‚ö†Ô∏è NPM n√£o encontrado! √â necess√°rio para instalar depend√™ncias.');
    printInfo('üì• Instale o Node.js e NPM em: https://nodejs.org');
    process.exit(1);
  }

  printDetail('‚úÖ Todos os requisitos atendidos.');
}

async function confirmUpdate() {
  printWarning('‚ö†Ô∏è Aten√ß√£o: A atualiza√ß√£o sobrescrever√° arquivos existentes, exceto configura√ß√µes e dados salvos.');
  printInfo('üìÇ Um backup ser√° criado automaticamente.');
  printWarning('üõë Pressione Ctrl+C para cancelar a qualquer momento.');

  return new Promise((resolve) => {
    let countdown = 5;
    const timer = setInterval(() => {
      process.stdout.write(`\r‚è≥ Iniciando em ${countdown} segundos...${' '.repeat(20)}`);
      countdown--;

      if (countdown < 0) {
        clearInterval(timer);
        process.stdout.write('\r                                  \n');
        printMessage('üöÄ Prosseguindo com a atualiza√ß√£o...');
        resolve();
      }
    }, 1000);
  });
}

async function createBackup() {
  printMessage('üìÅ Criando backup dos arquivos...');

  try {
    // Validate backup directory path
    if (!BACKUP_DIR || BACKUP_DIR.includes('..')) {
      throw new Error('Caminho de backup inv√°lido');
    }

    await fs.mkdir(path.join(BACKUP_DIR, 'dados', 'database'), { recursive: true });
    await fs.mkdir(path.join(BACKUP_DIR, 'dados', 'src'), { recursive: true });
    await fs.mkdir(path.join(BACKUP_DIR, 'dados', 'midias'), { recursive: true });

    const databaseDir = path.join(process.cwd(), 'dados', 'database');
    if (fsSync.existsSync(databaseDir)) {
      printDetail('üìÇ Copiando diret√≥rio de banco de dados...');
      
      // Verify database directory is accessible
      try {
        await fs.access(databaseDir);
        await fs.cp(databaseDir, path.join(BACKUP_DIR, 'dados', 'database'), { recursive: true });
      } catch (accessError) {
        printWarning(`‚ö†Ô∏è N√£o foi poss√≠vel acessar o diret√≥rio de banco de dados: ${accessError.message}`);
        throw new Error('Falha ao acessar diret√≥rio de dados para backup');
      }
    }

    const configFile = path.join(process.cwd(), 'dados', 'src', 'config.json');
    if (fsSync.existsSync(configFile)) {
      printDetail('üìù Copiando arquivo de configura√ß√£o...');
      try {
        await fs.access(configFile, fsSync.constants.R_OK);
        await fs.copyFile(configFile, path.join(BACKUP_DIR, 'dados', 'src', 'config.json'));
      } catch (accessError) {
        printWarning(`‚ö†Ô∏è N√£o foi poss√≠vel acessar o arquivo de configura√ß√£o: ${accessError.message}`);
        throw new Error('Falha ao acessar arquivo de configura√ß√£o para backup');
      }
    }

    const midiasDir = path.join(process.cwd(), 'dados', 'midias');
    if (fsSync.existsSync(midiasDir)) {
      printDetail('üñºÔ∏è Copiando diret√≥rio de m√≠dias...');
      try {
        await fs.access(midiasDir);
        await fs.cp(midiasDir, path.join(BACKUP_DIR, 'dados', 'midias'), { recursive: true });
      } catch (accessError) {
        printWarning(`‚ö†Ô∏è N√£o foi poss√≠vel acessar o diret√≥rio de m√≠dias: ${accessError.message}`);
        throw new Error('Falha ao acessar diret√≥rio de m√≠dias para backup');
      }
    }

    // Verify backup was created successfully
    const backupDatabaseDir = path.join(BACKUP_DIR, 'dados', 'database');
    const backupConfigFile = path.join(BACKUP_DIR, 'dados', 'src', 'config.json');
    const backupMidiasDir = path.join(BACKUP_DIR, 'dados', 'midias');

    const backupSuccess = (
      (fsSync.existsSync(backupDatabaseDir) || !fsSync.existsSync(databaseDir)) &&
      (fsSync.existsSync(backupConfigFile) || !fsSync.existsSync(configFile)) &&
      (fsSync.existsSync(backupMidiasDir) || !fsSync.existsSync(midiasDir))
    );

    if (!backupSuccess) {
      throw new Error('Backup incompleto - alguns arquivos n√£o foram copiados');
    }

    printMessage(`‚úÖ Backup salvo em: ${BACKUP_DIR}`);
  } catch (error) {
    printWarning(`‚ùå Erro ao criar backup: ${error.message}`);
    printInfo('üìù A atualiza√ß√£o ser√° cancelada para evitar perda de dados.');
    throw error;
  }
}

async function downloadUpdate() {
  printMessage('üì• Baixando a vers√£o mais recente do LEO MODZ BOT...');

  try {
    // Validate temp directory path
    if (!TEMP_DIR || TEMP_DIR.includes('..')) {
      throw new Error('Caminho de diret√≥rio tempor√°rio inv√°lido');
    }

    if (fsSync.existsSync(TEMP_DIR)) {
      printDetail('üîÑ Removendo diret√≥rio tempor√°rio existente...');
      try {
        await fs.rm(TEMP_DIR, { recursive: true, force: true });
      } catch (rmError) {
        printWarning(`‚ö†Ô∏è N√£o foi poss√≠vel remover diret√≥rio tempor√°rio existente: ${rmError.message}`);
        throw new Error('Falha ao limpar diret√≥rio tempor√°rio');
      }
    }

    printDetail('üîÑ Clonando reposit√≥rio...');
    let gitProcess;
    try {
      gitProcess = exec(`git clone --depth 1 ${REPO_URL} "${TEMP_DIR}"`, (error) => {
        if (error) {
          printWarning(`‚ùå Falha ao clonar reposit√≥rio: ${error.message}`);
          reject(error);
        }
      });
    } catch (execError) {
      printWarning(`‚ùå Falha ao iniciar processo Git: ${execError.message}`);
      throw new Error('Falha ao iniciar processo de download');
    }

    const spinner = ['‚†ã', '‚†ô', '‚†π', '‚†∏', '‚†º', '‚†¥', '‚†¶', '‚†ß', '‚†á', '‚†è'];
    let i = 0;
    const interval = setInterval(() => {
      process.stdout.write(`\r${spinner[i]} Baixando...`);
      i = (i + 1) % spinner.length;
    }, 100);

    return new Promise((resolve, reject) => {
      gitProcess.on('close', async (code) => {
        clearInterval(interval);
        process.stdout.write('\r                 \r');
        
        if (code !== 0) {
          printWarning(`‚ùå Git falhou com c√≥digo de sa√≠da ${code}`);
          reject(new Error(`Git clone failed with exit code ${code}`));
          return;
        }

        // Verify the clone was successful
        if (!fsSync.existsSync(TEMP_DIR)) {
          reject(new Error('Diret√≥rio tempor√°rio n√£o foi criado ap√≥s o clone'));
          return;
        }

        // Check if it's a valid git repository
        const gitDir = path.join(TEMP_DIR, '.git');
        if (!fsSync.existsSync(gitDir)) {
          reject(new Error('Clone do reposit√≥rio Git inv√°lido'));
          return;
        }

        // Remove README.md as in the original code
        try {
          const readmePath = path.join(TEMP_DIR, 'README.md');
          if (fsSync.existsSync(readmePath)) {
            await fs.unlink(readmePath);
          }
        } catch (unlinkError) {
          printWarning(`‚ö†Ô∏è N√£o foi poss√≠vel remover README.md: ${unlinkError.message}`);
          // Don't fail the entire process for this
        }

        printMessage('‚úÖ Download conclu√≠do com sucesso.');
        resolve();
      });

      gitProcess.on('error', (error) => {
        clearInterval(interval);
        process.stdout.write('\r                 \r');
        printWarning(`‚ùå Erro no processo Git: ${error.message}`);
        reject(error);
      });
    });
  } catch (error) {
    printWarning(`‚ùå Falha ao baixar a atualiza√ß√£o: ${error.message}`);
    printInfo('üîç Verificando conectividade com o GitHub...');
    try {
      await execAsync(isWindows ? 'ping github.com -n 1' : 'ping -c 1 github.com');
      printWarning('‚ö†Ô∏è Verifique permiss√µes ou configura√ß√£o do Git.');
    } catch {
      printWarning('‚ö†Ô∏è Sem conex√£o com a internet. Verifique sua rede.');
    }
    throw error;
  }
}

async function cleanOldFiles() {
  printMessage('üßπ Limpando arquivos antigos...');

  try {
    const itemsToDelete = [
      { path: path.join(process.cwd(), '.git'), type: 'dir', name: '.git' },
      { path: path.join(process.cwd(), '.github'), type: 'dir', name: '.github' },
      { path: path.join(process.cwd(), '.npm'), type: 'dir', name: '.npm' },
      { path: path.join(process.cwd(), 'node_modules'), type: 'dir', name: 'node_modules' },
      { path: path.join(process.cwd(), 'package-lock.json'), type: 'file', name: 'package-lock.json' },
      { path: path.join(process.cwd(), 'README.md'), type: 'file', name: 'README.md' },
    ];

    for (const item of itemsToDelete) {
      if (fsSync.existsSync(item.path)) {
        printDetail(`üìÇ Removendo ${item.name}...`);
        if (item.type === 'dir') {
          await fs.rm(item.path, { recursive: true, force: true });
        } else {
          await fs.unlink(item.path);
        }
      }
    }

    const dadosDir = path.join(process.cwd(), 'dados');
    if (fsSync.existsSync(dadosDir)) {
      printDetail('üìÇ Preservando diret√≥rio de dados...');
      
      // Only remove specific files that need updating, not the entire dados directory
      const filesToClean = [
        'src/config.json',  // This will be restored from backup
        'src/.scripts',     // Old scripts that will be replaced
      ];
      
      for (const fileToClean of filesToClean) {
        const filePath = path.join(dadosDir, fileToClean);
        if (fsSync.existsSync(filePath)) {
          printDetail(`üìÇ Removendo arquivo antigo: ${fileToClean}...`);
          if (fsSync.statSync(filePath).isDirectory()) {
            await fs.rm(filePath, { recursive: true, force: true });
          } else {
            await fs.unlink(filePath);
          }
        }
      }
      
      printDetail('‚úÖ Diret√≥rio de dados preservado com sucesso.');
    }

    printMessage('‚úÖ Limpeza conclu√≠da com sucesso.');
  } catch (error) {
    printWarning(`‚ùå Erro ao limpar arquivos antigos: ${error.message}`);
    throw error;
  }
}

async function applyUpdate() {
  printMessage('üöÄ Aplicando atualiza√ß√£o...');

  try {
    await fs.cp(TEMP_DIR, process.cwd(), { recursive: true });

    await fs.rm(TEMP_DIR, { recursive: true, force: true });

    printMessage('‚úÖ Atualiza√ß√£o aplicada com sucesso.');
  } catch (error) {
    printWarning(`‚ùå Erro ao aplicar atualiza√ß√£o: ${error.message}`);
    throw error;
  }
}

async function restoreBackup() {
  printMessage('üìÇ Restaurando backup...');

  try {
    await fs.mkdir(path.join(process.cwd(), 'dados', 'database'), { recursive: true });
    await fs.mkdir(path.join(process.cwd(), 'dados', 'src'), { recursive: true });
    await fs.mkdir(path.join(process.cwd(), 'dados', 'midias'), { recursive: true });

    const backupDatabaseDir = path.join(BACKUP_DIR, 'dados', 'database');
    if (fsSync.existsSync(backupDatabaseDir)) {
      printDetail('üìÇ Restaurando banco de dados...');
      await fs.cp(backupDatabaseDir, path.join(process.cwd(), 'dados', 'database'), { recursive: true });
    }

    const backupConfigFile = path.join(BACKUP_DIR, 'dados', 'src', 'config.json');
    if (fsSync.existsSync(backupConfigFile)) {
      printDetail('üìù Restaurando arquivo de configura√ß√£o...');
      await fs.copyFile(backupConfigFile, path.join(process.cwd(), 'dados', 'src', 'config.json'));
    }

    const backupMidiasDir = path.join(BACKUP_DIR, 'dados', 'midias');
    if (fsSync.existsSync(backupMidiasDir)) {
      printDetail('üñºÔ∏è Restaurando diret√≥rio de m√≠dias...');
      await fs.cp(backupMidiasDir, path.join(process.cwd(), 'dados', 'midias'), { recursive: true });
    }

    printMessage('‚úÖ Backup restaurado com sucesso.');
  } catch (error) {
    printWarning(`‚ùå Erro ao restaurar backup: ${error.message}`);
    throw error;
  }
}

async function checkDependencyChanges() {
  printInfo('üîç Verificando mudan√ßas nas depend√™ncias...');
  
  try {
    const currentPackageJsonPath = path.join(process.cwd(), 'package.json');
    const newPackageJsonPath = path.join(TEMP_DIR, 'package.json');
    
    if (!fsSync.existsSync(currentPackageJsonPath) || !fsSync.existsSync(newPackageJsonPath)) {
      printDetail('üì¶ Arquivo package.json n√£o encontrado, instala√ß√£o ser√° necess√°ria');
      return 'MISSING_PACKAGE_JSON';
    }
    
    const currentPackage = JSON.parse(await fs.readFile(currentPackageJsonPath, 'utf8'));
    const newPackage = JSON.parse(await fs.readFile(newPackageJsonPath, 'utf8'));
    
    // Check for version compatibility
    if (currentPackage.version && newPackage.version && currentPackage.version !== newPackage.version) {
      printDetail(`üì¶ Vers√£o alterada de ${currentPackage.version} para ${newPackage.version}`);
    }
    
    // Check Node.js version requirements
    if (newPackage.engines && newPackage.engines.node) {
      const currentNodeVersion = process.version;
      const requiredNodeVersion = newPackage.engines.node;
      
      if (!satisfiesNodeVersion(currentNodeVersion, requiredNodeVersion)) {
        printWarning(`‚ö†Ô∏è Vers√£o do Node.js n√£o compat√≠vel. Requer: ${requiredNodeVersion}, Atual: ${currentNodeVersion}`);
        return 'NODE_VERSION_MISMATCH';
      }
    }
    
    // Check main dependencies
    const currentDeps = JSON.stringify(currentPackage.dependencies || {});
    const newDeps = JSON.stringify(newPackage.dependencies || {});
    
    // Check dev dependencies
    const currentDevDeps = JSON.stringify(currentPackage.devDependencies || {});
    const newDevDeps = JSON.stringify(newPackage.devDependencies || {});
    
    // Check optional dependencies
    const currentOptDeps = JSON.stringify(currentPackage.optionalDependencies || {});
    const newOptDeps = JSON.stringify(newPackage.optionalDependencies || {});
    
    // Check npm scripts
    const currentScripts = JSON.stringify(currentPackage.scripts || {});
    const newScripts = JSON.stringify(newPackage.scripts || {});
    
    // Check for package.json structure changes
    const currentStructure = JSON.stringify({
      version: currentPackage.version,
      main: currentPackage.main,
      engines: currentPackage.engines,
      dependencies: currentPackage.dependencies,
      devDependencies: currentPackage.devDependencies,
      optionalDependencies: currentPackage.optionalDependencies,
      scripts: currentPackage.scripts
    });
    
    const newStructure = JSON.stringify({
      version: newPackage.version,
      main: newPackage.main,
      engines: newPackage.engines,
      dependencies: newPackage.dependencies,
      devDependencies: newPackage.devDependencies,
      optionalDependencies: newPackage.optionalDependencies,
      scripts: newPackage.scripts
    });
    
    if (currentDeps !== newDeps ||
        currentDevDeps !== newDevDeps ||
        currentOptDeps !== newOptDeps ||
        currentScripts !== newScripts ||
        currentStructure !== newStructure) {
      printDetail('üì¶ Configura√ß√µes alteradas, reinstala√ß√£o necess√°ria');
      return 'DEPENDENCIES_CHANGED';
    }
    
    const nodeModulesPath = path.join(process.cwd(), 'node_modules');
    if (!fsSync.existsSync(nodeModulesPath)) {
      printDetail('üì¶ Diret√≥rio node_modules n√£o encontrado, instala√ß√£o necess√°ria');
      return 'MISSING_NODE_MODULES';
    }
    
    // Verify all dependencies in package.json are installed
    const allDeps = {
      ...currentPackage.dependencies,
      ...currentPackage.devDependencies,
      ...currentPackage.optionalDependencies
    };
    
    for (const [depName, depVersion] of Object.entries(allDeps)) {
      const depPath = path.join(nodeModulesPath, depName);
      if (!fsSync.existsSync(depPath)) {
        printDetail(`üì¶ Depend√™ncia n√£o encontrada: ${depName}`);
        return 'MISSING_DEPENDENCIES';
      }
    }
    
    printDetail('‚úÖ Depend√™ncias inalteradas, reinstala√ß√£o n√£o necess√°ria');
    return 'NO_CHANGES';
  } catch (error) {
    printWarning(`‚ùå Erro ao verificar depend√™ncias: ${error.message}`);
    return 'ERROR';
  }
}

// Helper function to check Node.js version compatibility
function satisfiesNodeVersion(currentVersion, requiredVersion) {
  // Simple version comparison - in a real implementation, you might want to use a proper semver library
  const current = currentVersion.replace('v', '').split('.').map(Number);
  const required = requiredVersion.replace('v', '').split('.').map(Number);
  
  for (let i = 0; i < Math.max(current.length, required.length); i++) {
    const currentPart = current[i] || 0;
    const requiredPart = required[i] || 0;
    
    if (currentPart > requiredPart) return true;
    if (currentPart < requiredPart) return false;
  }
  
  return true; // Versions are equal or current satisfies requirement
}

async function installDependencies() {
  const checkResult = await checkDependencyChanges();
  
  // Handle different check results
  if (checkResult === 'NO_CHANGES') {
    printMessage('‚ö° Depend√™ncias j√° est√£o atualizadas, pulando instala√ß√£o');
    return;
  }
  
  // Provide specific feedback based on the check result
  if (checkResult === 'MISSING_PACKAGE_JSON') {
    printWarning('‚ùå Arquivo package.json n√£o encontrado. Instala√ß√£o necess√°ria.');
  } else if (checkResult === 'NODE_VERSION_MISMATCH') {
    printWarning('‚ùå Vers√£o do Node.js n√£o compat√≠vel. Instala√ß√£o necess√°ria.');
  } else if (checkResult === 'DEPENDENCIES_CHANGED') {
    printMessage('üì¶ Configura√ß√µes de depend√™ncias alteradas, iniciando instala√ß√£o...');
  } else if (checkResult === 'MISSING_NODE_MODULES') {
    printMessage('üì¶ Diret√≥rio node_modules n√£o encontrado, iniciando instala√ß√£o...');
  } else if (checkResult === 'MISSING_DEPENDENCIES') {
    printMessage('üì¶ Depend√™ncias ausentes detectadas, iniciando instala√ß√£o...');
  } else if (checkResult === 'ERROR') {
    printWarning('‚ùå Erro ao verificar depend√™ncias. Tentando instala√ß√£o como medida de seguran√ßa...');
  }
  
  printMessage('üì¶ Instalando depend√™ncias...');

  try {
    await new Promise((resolve, reject) => {
      const npmProcess = exec('npm run config:install', { shell: isWindows }, (error) =>
        error ? reject(error) : resolve()
      );

      const spinner = ['‚†ã', '‚†ô', '‚†π', '‚†∏', '‚†º', '‚†¥', '‚†¶', '‚†ß', '‚†á', '‚†è'];
      let i = 0;
      const interval = setInterval(() => {
        process.stdout.write(`\r${spinner[i]} Instalando depend√™ncias...`);
        i = (i + 1) % spinner.length;
      }, 100);

      npmProcess.on('close', (code) => {
        clearInterval(interval);
        process.stdout.write('\r                                \r');
        
        if (code === 0) {
          resolve();
        } else {
          reject(new Error(`NPM install failed with exit code ${code}`));
        }
      });
    });

    // Verify installation was successful
    const nodeModulesPath = path.join(process.cwd(), 'node_modules');
    if (!fsSync.existsSync(nodeModulesPath)) {
      throw new Error('Diret√≥rio node_modules n√£o foi criado ap√≥s a instala√ß√£o');
    }

    printMessage('‚úÖ Depend√™ncias instaladas com sucesso.');
  } catch (error) {
    printWarning(`‚ùå Falha ao instalar depend√™ncias: ${error.message}`);
    printInfo('üìù Tente executar manualmente: npm run config:install');
    
    // Provide more specific guidance based on the error
    if (error.message.includes('EACCES')) {
      printInfo('üîí Permiss√£o negada. Tente executar como administrador/sudo.');
    } else if (error.message.includes('ENOTFOUND')) {
      printInfo('üåê Rede n√£o encontrada. Verifique sua conex√£o com a internet.');
    } else if (error.message.includes('npm ERR!')) {
      printInfo('üì¶ Erro no NPM. Verifique sua instala√ß√£o do Node.js e NPM.');
    }
    
    throw error;
  }
}

async function cleanup() {
  printMessage('üßπ Finalizando e limpando arquivos tempor√°rios...');

  try {
    if (fsSync.existsSync(BACKUP_DIR)) {
      printDetail('üìÇ Removendo diret√≥rio de backup...');
      await fs.rm(BACKUP_DIR, { recursive: true, force: true });
      printDetail('‚úÖ Backup removido.');
    }
  } catch (error) {
    printWarning(`‚ùå Erro ao limpar arquivos tempor√°rios: ${error.message}`);
  }
}

async function main() {
  let backupCreated = false;
  let downloadSuccessful = false;
  let updateApplied = false;
  
  try {
    setupGracefulShutdown();
    await displayHeader();

    const steps = [
      { name: 'Verificando requisitos do sistema', func: checkRequirements },
      { name: 'Confirmando atualiza√ß√£o', func: confirmUpdate },
      { name: 'Criando backup', func: async () => {
        await createBackup();
        backupCreated = true;
        // Verify backup was actually created before proceeding
        if (!fsSync.existsSync(BACKUP_DIR)) {
          throw new Error('Falha ao criar diret√≥rio de backup');
        }
      } },
      { name: 'Baixando a vers√£o mais recente', func: async () => {
        await downloadUpdate();
        downloadSuccessful = true;
        // Verify download was successful before proceeding
        if (!fsSync.existsSync(TEMP_DIR)) {
          throw new Error('Falha ao baixar atualiza√ß√£o');
        }
      } },
      { name: 'Limpando arquivos antigos', func: cleanOldFiles },
      { name: 'Aplicando atualiza√ß√£o', func: async () => {
        await applyUpdate();
        updateApplied = true;
        // Verify update was applied successfully
        const newPackageJson = path.join(process.cwd(), 'package.json');
        if (!fsSync.existsSync(newPackageJson)) {
          throw new Error('Falha ao aplicar atualiza√ß√£o - package.json ausente');
        }
      } },
      { name: 'Restaurando backup', func: restoreBackup },
      { name: 'Instalando depend√™ncias', func: installDependencies },
      { name: 'Finalizando e limpando', func: cleanup },
    ];

    let completedSteps = 0;
    const totalSteps = steps.length;

    for (const step of steps) {
      try {
        await step.func();
        completedSteps++;
        printDetail(`üìä Progresso: ${completedSteps}/${totalSteps} etapas conclu√≠das.`);
      } catch (stepError) {
        printWarning(`‚ùå Falha na etapa "${step.name}": ${stepError.message}`);
        
        // If backup was created but update failed, try to restore
        if (backupCreated && !updateApplied && step.name !== 'Restaurando backup') {
          printInfo('üîÑ Tentando restaurar backup devido a falha na atualiza√ß√£o...');
          try {
            await restoreBackup();
            printInfo('‚úÖ Backup restaurado com sucesso.');
          } catch (restoreError) {
            printWarning(`‚ùå Falha ao restaurar backup: ${restoreError.message}`);
          }
        }
        
        throw stepError; // Re-throw to be caught by the outer try-catch
      }
    }

    printMessage('üîÑ Buscando informa√ß√µes do √∫ltimo commit...');
    const response = await fetch('https://api.github.com/repos/hiudyy/nazuna/commits?per_page=1', {
      headers: { Accept: 'application/vnd.github+json' },
    });

    if (!response.ok) {
      throw new Error(`Erro ao buscar commits: ${response.status} ${response.statusText}`);
    }

    const linkHeader = response.headers.get('link');
    const NumberUp = linkHeader?.match(/page=(\d+)>;\s*rel="last"/)?.[1];

    const jsonUp = { total: Number(NumberUp) || 0 };
    await fs.writeFile(path.join(process.cwd(), 'dados', 'database', 'updateSave.json'), JSON.stringify(jsonUp));

    printSeparator();
    printMessage('üéâ Atualiza√ß√£o conclu√≠da com sucesso!');
    printMessage('üöÄ Inicie o bot com: npm start');
    printSeparator();
  } catch (error) {
    printSeparator();
    printWarning(`‚ùå Erro durante a atualiza√ß√£o: ${error.message}`);
    
    // Enhanced error recovery
    if (backupCreated && !updateApplied) {
      try {
        await restoreBackup();
        printInfo('üìÇ Backup da vers√£o antiga restaurado automaticamente.');
      } catch (restoreError) {
        printWarning(`‚ùå Falha ao restaurar backup automaticamente: ${restoreError.message}`);
      }
    } else if (backupCreated && downloadSuccessful && !updateApplied) {
      printWarning('‚ö†Ô∏è Download conclu√≠do, mas atualiza√ß√£o n√£o foi aplicada.');
      printInfo('üîÑ Voc√™ pode tentar aplicar a atualiza√ß√£o manualmente do diret√≥rio tempor√°rio.');
    } else if (!backupCreated) {
      printWarning('‚ö†Ô∏è Nenhum backup foi criado. Se houve falha, seus dados podem estar corrompidos.');
    }
    
    printWarning(`üìÇ Backup dispon√≠vel em: ${BACKUP_DIR || 'Indispon√≠vel'}`);
    printInfo('üìù Para restaurar manualmente, copie os arquivos do backup para os diret√≥rios correspondentes.');
    printInfo('üì© Em caso de d√∫vidas, contate o desenvolvedor.');
    
    // Exit with error code
    process.exit(1);
  }
}

main();